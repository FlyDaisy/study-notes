<script>
import { Page } from '@wxa/core';

@Page
export default class BFC{
    
}
</script>

<config>
{
    "navigationBarTitleText": "块级格式化上下文"
}
</config>
<template>
<view class="container block-format-context">
    <view class="head">### 前置知识</view>
    <view class="fz-14 text">* 普通流 (normal flow): 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</view>
    <view class="fz-14 text">* 浮动 (float): 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</view>
    <view class="fz-14 text">* 绝对定位 (absolute positioning): 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</view>
    
    <view class="head">### 定义</view>
    <view class="text fz-14">属于上述定位方案的普通流。BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并 且与这个区域外部毫不相干。BFC可以被理解为一种容器，一种被隔离起来了的独立容器，容器里面的元素不会在布局上 影响到外面的元素，并且 BFC具有普通容器没有的一些特性，例如可以包含浮动元素等等；</view>
    <view class="sticky-top text fz-14">简单来说就是，BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局</view>
    <view class="fz-14 text">Formatting context是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系、相互作用。CSS2.1 中只有BFC、IFC（行级格式化上下文），CSS3中还增加了GFC（网格布局格式化上下文）和FFC（自适应格式化上下文）。</view>
    <!-- position:absolute/fixed 这些优先级高于BFC规则。 -->
    <!-- BFC= OFDP(overflow,float,display, position) -->
    <view class="text">
        <view class="head">### 触发BFC条件</view>
        <text class="fz-14">
            根元素或其它包含它的元素 \n 
            float的值不为none \n
            overflow: hidden(overflow的值不为visible) \n 
            display的值为inline-block、table-cell、table-caption \n 
            position: absolute || fixed  \n 
            <!-- 弹性盒子 display: flex/inline-flex(flex应该是在css2.1中属于BFC，css3中归于FFC) -->
        </text>
    </view>
    <view class="text">
        <view class="head">### BFC的规则</view>
        <text class="fz-14">
            1、BFC就是一个块级元素，块级元素会在垂直方向一个接一个的排列 \n 
            2、每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此\n 
            3、BFC就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签 \n 
            4、垂直方向的距离由margin决定， 属于同一个BFC的两个相邻的标签外边距会发生重叠,与方向无关 \n 
            5、计算BFC的高度时，浮动元素也参与计算 \n 
            6、BFC的区域不会与float的元素区域重叠
        </text>
    </view>
    <view class="text">
        <view class="head">实际用途</view>
        <text class="fz-14">防止margin重叠（塌陷）\n 可以包含浮动元素——清除内部浮动(文字环绕) \n 防止与浮动元素重叠 \n float 元素高度塌陷</text>
    </view>
    
    <view class="content">
        <view class="margin-test">
            <view class="head">### margin重叠(塌陷)问题</view>
            <view class="text fz-14">属于同一个BFC的两个相邻的标签外边距会发生重叠</view>
            <view class="example flex">
                <view class="flex-1">
                    <view class="box"></view>
                    <view class="box"></view>
                    <view class="fz-14">此时上下边距重叠</view>
                </view>
                <view class="flex-1">
                    <view class="box"></view>
                    <view class="box large"></view>
                    <view class="fz-14">此时上下边距合并取最大值</view>
                </view>
            </view>
            <view class="example collapse">
                <view class="box"></view>
                <view class="box"></view>
                <text class="text fz-14">父子嵌套的元素垂直方向的margin取最大值</text>
            </view>
            <view class="text fz-14">浏览器的渲染规则导致的 * 解决方案：放在不同的BFC中或一个用margin一个用padding</view>
        </view>
        <view class="height-test">
            <view class="head">### 高度塌陷问题(清除浮动)</view>
            <view class="example">
                <view class="box float"></view>
                <text class="fz-14">此时父元素的高度产生塌陷</text>
            </view>
            <view class="example overflow">
                <view class="box float"></view>
                <text class="fz-14">触发容器的BFC来解决高度塌陷</text>
            </view>
        </view>
        <view class="overlapping-test">
            <view class="head">### 与浮动元素重叠问题</view>
            <view class="example">
                <view class="box float"></view>
                <view class="box"></view>
                <text class="fz-14">此时第二个元素与浮动元素重叠</text>
            </view>
            <view class="example">
                <view class="box float"></view>
                <view class="box overflow"></view>
                <text class="fz-14">触发第二个容器的BFC来解决重叠问题</text>
            </view>
        </view>
    </view>
</view>
</template>

